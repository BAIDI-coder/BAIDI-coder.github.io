{"pages":[{"title":"","text":"","link":"/404/"},{"title":"Category","text":"","link":"/categories/"},{"title":"about","text":"个人简介 这个人很懒，暂时什么也没留下","link":"/about/"},{"title":"links","text":"","link":"/links/"},{"title":"Repositories","text":"","link":"/repository/"},{"title":"Tag","text":"","link":"/tags/"}],"posts":[{"title":"Hello","text":"","link":"/posts/f7d18982/"},{"title":"杂项&#x2F;DiscreteMathematicNote","text":"Discrete MatheMatic Note 离散数学笔记 Author: BAIDI Date: from 2020-2-19 1 Logic and Proofs 逻辑和证明 1.1 Propositional Logic connectives 逻辑联结词 negation conjunction(合取) disjunction(析取) --inclusive/exclusive … conditional statement/biconditional statement 1.2 Applications of Propositional Logic System Specification 系统规范说明 Boolean Logic 布尔逻辑 Logic Puzzles 逻辑谜题 Logic Circuits 逻辑电路 1.3 Propositional Equivalences tautology, contradiction, contingency logically equivalent ≡ ⇔ Law De Morgan’s Law ¬(p ∧ q) ≡ ¬p ∨ ¬q ¬(p ∨ q) ≡ ¬p ∧ ¬q other Law(check relative table) ¬p ∨ q and p → q Distribute Law p ∨ (q ∧ r) ≡ (p ∨ q) ∧ (p ∨ r) Law’s extension Law’s application Proposition’s Satisfiability and Problem’s Solution Soduka Puzzle’s solution 1.4 Predicates and Quantifiers 谓词和量词 Predicates 谓词 basic notion:Propositional function P (命题函数P) n-place / n-ary predicates (n位/元谓词) 包含多个变量的谓词 P(x1, x2…xn) --谓词+变量=命题 Application–verify the correctness of a programme: Precondition(input) &amp; Postcondition(output expected) (前置条件 &amp; 后置条件） Quantifiers 量词 Notions: Quantification 量化 Universal quantifier 全称量词 domain: domain of discourse 论域(universe of discouse 全体域) counterexample 反例 Existential quantifier 存在量词 Precedence 优先级 Resticted Domains 约束域 (约束域和条件，合取的等价关系) bound (被赋值或被量词联结）-绑定 scope -作用域 free -自由(未绑定的变量) Logic Equivalences Involving Quantifiers Notions: comma 逗号 Prolog --programming in logic Prolog fact / Prolog rule semicolon 分号 Nested Quantifiers 嵌套变量 Rules of inference 推理规则 argument 论证 valid 有效性 premise 前提 fallacy 谬误 argument form 推理形式 modus ponens 假言推理 （law of detachment 分离规则） hypothesis 假设 syllogism 三段论 contrapositive 逆否命题 instantiation 实例 arbitrary 任意的 Itroduction to Proofs theorem 定理 axiom 公理 lemmma 引理 corollary 推论 conjecture 猜想 vacuous proof 空证明 trivial proof 平凡证明","link":"/posts/b8e16674/"},{"title":"技术&#x2F;AndroidLearning","text":"Android Studio 入坑笔记 Android Studio 自动创建 resource id 失败 重启 AS。 Sync with file system 同步一下？ 查看 R.java 中的 id 。Project 下依次打开app–&gt;build–&gt;generated–&gt;source–&gt;r–&gt;debug，在debug中的两个选项的子文件中分别有有一个R文件，既我们要找的R.java文件。（或者直接shift+shift查找R.java","link":"/posts/fae5c3cd/"},{"title":"杂项&#x2F;Ideas","text":"Williams’s Fantastic Ideas Github 有一个叫做 app ideas 的仓库有很多好的项目 根据图片定位到视频中的某一帧","link":"/posts/853a41fd/"},{"title":"技术&#x2F;备忘&#x2F;小技巧手册","text":"每天一个避坑小技巧 解决网站元素（例如图片）加载不出来的方法 浏览器下审查该元素的URL地址，然后在搜索他的域名对应的地址（https://tools.ipip.net/domain.php） 将域名解析 “xxx.xxx.xxx.xxx 域名” 加入到hosts文件中（一般在 %SystemRoot%\\system32\\drivers\\etc\\ 目录下） cmd 下 ipconfig \\flushdns 刷新试试 刷新浏览器查看效果 SSR 解决端口占用问题： 法一：在 SSR 选项设置里改变端口 法二：taskkill /pid xxx -f","link":"/posts/fac7f463/"},{"title":"技术&#x2F;备忘&#x2F;IDE&amp;Editor Shortcuts Query","text":"各大 IDE &amp; Editor 快捷键对照表 操作 IntelliJ IDEA Visual Studio Code Visual Studio 编辑 Editing 格式化代码 Format Code Ctrl+Shift+L Shift+Alt+F 删除行 Delete Line Ctrl+Y Ctrl+Shift+K 选中行 Select Line Ctrl+L 复制行 Copy Line Ctrl+C Ctrl+C 剪切行 Cut Line Ctrl+X Ctrl+X 重复行 Duplicate Line Ctrl+D Alt+Shift+Up/Down 移动行 Move Line Alt+Shift+Up/Down Alt+Up/Down 换行 New Line Shift+Enter Shift+Enter 插入上行 Insert Line Above Ctrl+Alt+Enter Ctrl+Shift+Enter 注释 Comment Ctrl+/ Ctrl+/ 块注释 Block Comment Ctrl+Shift+/ Ctrl+Shift+/ 选择块 Block Selection Ctrl+W Ctrl+Shift+W Alt+Shift+Right/Left 选择相同内容 Alt+J Ctrl+D 优化导包 Optimize Imports Ctrl+Alt+O 代码提示 Code Assist Ctrl+Space Ctrl+Shift+Space 代码补全 Code Completion Ctrl+Shift+Enter 快速修复 Quick Fix Alt+Enter Quick Access Double Shift 参数信息 Parameter Info Ctrl+P 查看API文档 Quick Document Ctrl+Q 新建文件 New File Ctrl+N 激活编辑器 Active Editor Esc 全部小写 全部大写 导航 Navigation 上/下一个Tab Alt+Left/Right Ctrl+PgUp/PgDn 上/下一个 Ctrl+Alt+Left/Right 上一处修改的地方 Ctrl+Shift+Backspace 跳转到行 Go To Line Ctrl+G Ctrl+G 大纲/结构 Outline/Structure Ctrl+F12 查看类层级 Type Hierarchy 查看最近文件 Recent File Ctrl+E 跳到文件 Go To File 切换视图 Switch View 重构 Refator 重命名 Rename Shift+F6 提取变量 Extract Variable 提取方法 Extract Method 搜索 Find 查找 Find Ctrl+F Ctrl+L Ctrl+F 查找下一个 查找上一个 全局搜索","link":"/posts/fde8aecf/"},{"title":"技术&#x2F;语言&#x2F;Java&amp;Kotlin语法对照","text":"Java &amp; Kotlin 的语法片段对照 函数式 API Java //传入接口类型的实例（或继承了接口的匿名类） /* public interface Runnable { void Run(); } */ new Thread(new Runnable() { @Override public void run() { //执行逻辑 } }).start() Kotlin //传入Lambda表达式（单抽象的接口类型也可简化为Lambda表达式后传入） Thread { //执行逻辑 }.start() 访问控制 修饰符 Java Kotlin pubilc 所有类可见 所有类可见（默认修饰符） private 当前类可见 当前类可见 protected 当前类，子类，同意包路径下的类可见 当前类，子类可见 default 同一包目录下的类可见（默认修饰符） 无 internal 无 同一模块下的类可见 Class 对象引用 语言 实例的Class对象 类的Class对象 Kotlin javaclass 类名::class.java Java (this).getclass() 类名.class","link":"/posts/7a368ad4/"},{"title":"技术&#x2F;备忘&#x2F;CMD 指令备忘","text":"CMD 指令备忘 Process 类 tasklist 列出所有进程 taskkill /pid xxx -f 杀死指定id process","link":"/posts/369ceeb5/"},{"title":"技术&#x2F;工具&#x2F;IDEA 学习笔记","text":"IDEA基础功能概览： shortcut(edit, 代码片段, 功能), 版本控制(VCS: git, github, local history) Debug, javadoc generator, database, web deployment project&amp;module 等概念, 模板, 项目结构查询管理 Tips 代码段：main sout标准输出 soutv输出变量，soutm输出方法名，soutp输出命令行参数 变量名.sout输出变量 iter增强型for循环 引用名.for 迭代指定引用类型 实例名.fori顺序遍历 xxx.forr倒序遍历 ifn --“if xxx is null”, inn --“if not null” xxx.nn, xxx.ifn JavaLea 条件断点 --右键断点处 ctrl+u 查看表达式的值 Tools javadoc generator: Local: zh_CN; Other command line args: encoding UTF-8 -charset UTF-8 IDE 常用快捷键对照表（原始来源: https://www.jianshu.com/p/6267a7d76018 ) 操作 eclipse IDEA Visual Studio Code Sublime 编辑 Editing 格式化代码 Format Code Ctrl+Shift+F Ctrl+Shift+L Shift+Alt+F 无 删除行 Delete Line Ctrl+D Ctrl+Y Ctrl+Shift+K Ctrl+Shift+K 复制行 Copy Line Ctrl+C Ctrl+C Ctrl+C 剪切行 Cut Line Ctrl+X Ctrl+X Ctrl+X 重复行 Duplicate Line Ctrl+Shift+Up/Down Ctrl+D Alt+Shift+Up/Down Ctrl+Shift+D 移动行 Move Line Alt+Up/Down Alt+Shift+Up/Down Alt+Up/Down Ctrl+Shift+Up/Down 换行 New Line Shift+Enter Shift+Enter Shift+Enter Ctrl+Enter 插入上行 Insert Line Above Ctrl+Shift+Enter Ctrl+Alt+Enter Ctrl+Shift+Enter Ctrl+Shift+Enter 注释 Comment Ctrl+/ Ctrl+/ Ctrl+/ Ctrl+/ 块注释 Block Comment Ctrl+Shift+/ Ctrl+Shift+\\ Ctrl+Shift+/ Ctrl+Shift+/ 选择块 Block Selection Alt+Shift+Up/Down Ctrl+W Ctrl+Shift+W Alt+Shift+Right/Left 优化导包 Optimize Imports Ctrl+Shift+O Ctrl+Alt+O 代码提示 Code Assist Alt+/ Ctrl+Space Ctrl+Shift+Space 代码补全 Code Completion Ctrl+Alt+/比较low Ctrl+Shift+Enter 快速修复 Quick Fix Ctrl+1 Alt+Enter Quick Access Ctrl+3 Double Shift 参数信息 Parameter Info Alt+Shift+/还不如 Alt+/ Ctrl+P 查看API文档 Quick Document Ctrl+Q 新建文件 New File Alt+Shift+N Ctrl+N 激活编辑器 Active Editor F12 Esc 全部小写 Ctrl+Shift+Y 全部大写 Ctrl+Shift+X 导航 Navigation 上/下一个Tab Ctrl+PgUp/PgDn Alt+Left/Right Ctrl+PgUp/PgDn 上/下一个 Alt+Left/Right Ctrl+Alt+Left/Right 上一处修改的地方 Ctrl+Q Ctrl+Shift+Backspace 跳转到行 Go To Line Ctrl+L Ctrl+G 大纲/结构 Outline/Structure Ctrl+O Ctrl+F12 查看类层级 Type Hierarchy Ctrl+T 查看最近文件 Recent File Ctrl+E Ctrl+F6 Ctrl+E 跳到文件 Go To File Ctrl+Shift+N 切换视图 Switch View Ctrl+F7 重构 Refator 重命名 Rename Alt+Shift+R Shift+F6 提取变量 Extract Variable Alt+Shift+L 提取方法 Extract Method Alt+Shift+M 搜索 Find 查找下一个 Ctrl+K 查找上一个 Ctrl+Shfit+K 全局搜索 Ctrl+H","link":"/posts/5a1e79ff/"},{"title":"技术&#x2F;语言&#x2F;JavaLearning","text":"2020-4-28 content: 对象与类，基本数据类型 int a, b; 则“a=b”表达式为int类型，不会自动转化为boolean类型 Java 的匿名内部类 //定义语法 new 父类构造器（实参列表) | 实现接口() //必须继承一个父类或接口 { //匿名内部类的类体部分 } /** * 规范： * 匿名类的声明是由java编译器自动派生自一个类实例创建表达式。 * 匿名类永远不能是抽象的。 * 匿名类总是隐式的final。 * 匿名类总是一个内部类；并且不能是static的。 */ 注意： 使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。 匿名内部类中是不能定义构造函数的。 匿名内部类中不能存在任何的静态成员变量和静态方法。 匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。 匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。 内部类的class文件命名是：主类＋$＋内部类名 匿名类的class文件命名是：主类＋$＋(1,2,3…) class 对象 获取方式：有三种获得Class对象的方式： Class.forName(“类的全限定名”) 实例对象.getClass() 类名.class （类字面常量） 每个类的运行时的类型信息就是用Class对象表示的","link":"/posts/6374ed46/"},{"title":"技术&#x2F;语言&#x2F;LatexTikz","text":"Tikz 绘图学习笔记 注意事项: \\begin{tikzpicture} 环境下每一行命令结尾都要加分号; \\node, \\coordinate, \\draw 语法参考：https://zhuanlan.zhihu.com/p/84943429 \\node 描点, \\coordinate 拟点, \\draw 画线, \\fill 填充 参考网站: 路径与坐标：https://www.latexstudio.net/archives/51602.html node 控制：https://www.latexstudio.net/archives/51617.html 线条控制: https://www.latexstudio.net/archives/51622.html 示例代码: \\node at (A)[circle,fill,inner sep=1pt]{}; % 点名 属性","link":"/posts/9b17222d/"},{"title":"技术&#x2F;语言&#x2F;Kotlin","text":"Kotlin 学习笔记 Kotlin 可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。 kotlin源文件不需要相匹配的目录和包，源文件可以放在任何文件目录。 $a 和 ${a.func()}我是真没话说。 完善的NULL检查机制 “!!, ?, ?:”（当一个引用可能为 null 值时, 对应的类型声明必须明确地标记为可为 null。方法是： “Type后 + ？”） 玩转for循环：可以方便的指定遍历的步长，范围。（ …, step, downTo, in, until) Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等。不同于 Java 的是，字符==不属于==数值类型，是一个独立的数据类型。 支持二进制字面量，数值类型混入下划线增加语义性。 有些时候较小类型不会隐式转换成较大类型，需要手动调用 .toXXX() 来进行显示的类型转换。 和 golang 一样少了分号（这就是语法糖吗i了i了 if-else 语句与when语句等可以视为 ==表达式==（可赋值 when 与 -&gt; 符号构成强大的分支控制。 完全抛弃基本数据类型改用对象数据类型“。 “fun xxx() = xxx” 这个语法糖结合 if else, when 等特性可以打出漂亮的组合拳。 class 继承的时候对继承的父类后面一般要加括号（因为 java 继承中必调用父类构造函数）且此构造函数必调用著构造函数。 Java 与 Kotlin 访问修饰符对照表 修饰符 Java Kotlin pubilc 所有类可见 所有类可见（默认修饰符） private 当前类可见 当前类可见 protected 当前类，子类，同意包路径下的类可见 当前类，子类可见 default 同一包目录下的类可见（默认修饰符） 无 internal 无 同一模块下的类可见 语法糖: 原生支持数据类、单例类 （自动完成 toString(), hashCode(), equals() 等方法） Java 数据类代码示例 public class Cellphone { String brand; double price; public Cellphone(String brand, double price) { this.brand = brand; this.price = price; } @Override public boolean equals(Object obj) { if (obj instanceof Cellphone) { Cellphone other = (Cellphone) obj; return other.brand.equals(brand) &amp;&amp; other.price == price; } return false; } @Override public int hashCode() { return brand.hashCode() + (int) price; } @Override public String toString() { return &quot;Cellphone(brand=&quot; + brand + &quot;, price=&quot; + price + &quot;)&quot;; } } Kotlin 数据类代码示例 data class Cellphone(val brand: String, val price: Double) //加一个data即可 Java 单例类代码示例 public class Singleton { private static Singleton instance; private Singleton() {} public synchronized static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } public void singletonTest() { System.out.println(&quot;singletonTest is called.&quot;); } } Kotlin 单例类代码示例 object Singleton { //只需要用object代替class即可 fun singletonTest() { println(&quot;singletonTest is called.&quot;) } //这里相当于一个静态方法 } Kotlin class 类 语言 实例的Class对象 类的Class对象 Kotlin javaclass 类名::class.java Java (this).getclass() 类名.class Kotlin 标准函数 一系列定义于 Standard.kt 里的函数 参照表 函数 特点 代码段 let() 调用let的对象作为Lamda的参数，返回最后一行 obj.let {(obj2 -&gt;) //obj2是obj} with() 传入对象作为Lambda的上下文，返回最后一行 with(obj) {//obj上下文} run() 调用run的对象作为Lamda的上下文，返回最后一行 obj.run {//obj上下文} apply() 调用apply的对象作为Lamda的上下文，返回原对象 obj.apply {//obj上下文} Kotlin “静态方法调用” 单例类 objetc {} 伴生类 companion object {} 顶层方法 fun xxx()，可以被任意Kotlin代码直接调用，文件名作为类还可以用于java静态方法调用 @JvmStatic 注释，只能加注在单例类方法或伴生类方法上，使其编译成java静态方法","link":"/posts/ec3dabc7/"},{"title":"技术&#x2F;笔记&#x2F;第一行代码 Android（第三版）读书笔记","text":"第一行代码 Android（第三版）读书笔记 第一章 开启征程（概要） 项目结构与目录：page 17 - page 19 Log 方法与 Logcat 的完美结合 第二章 Kotlin 语法糖 同《Kotlin 学习笔记》一同食用效果最佳 《第一行》中出现的 Kotlin 特性预览表 主次构造函数 参数默认值 键值对传参 字符串内嵌表达式 init {}, constructor () {} fun xxx(str: String = “”) {…} xxx(str = “…”) “${value}” let 函数式 API Lambda 表达式 空指针检查 函数式 API obj.let {obj2 -&gt; …} {para -&gt; …}, {it.toString()} ? ?. !!. ?: map.maxby {} //Lambda表达式 容器初始化 数据类 单例类 循环遍历 listOf(), mapOf(), setOf() data object for-in, until, downTo, step, l…r, 容器遍历 分支控制 条件控制 “不变为先” 访问控制 when () {… -&gt; …}, if-else 语句/表达式 is (instanceof), else val, var, open class “public by default” 第三章 Activity！所见即所得 创建 Activity 创建和加载布局文件 layout 在 AndroidManifest.xml 中注册Activity 编写 Activity.kt 代码 （事件绑定，方法重写等） Activity 通信与切换 Intent 类 显式切换：Intent(上下文, 指定Activity 的 Class 类) 隐式切换：指定 action category，目标将会按照注册信息中的过滤条件响应 intent。 过滤条件：&lt;category&gt; &lt;action&gt; &lt;data&gt; 传参：.putExtra(), .getStringExtra() 启动方式：startActivity() //普通启动 startActivityForResult() //请求结果 Activity 类 Result 结果 设置结果：setResult() 取回结果：override onActivityResult() Bundle 类 团队合作时用伴生类“静态方法”来启动 Activity 生命周期 返回栈 思维导图 保存信息 Bundle 类型 onSaveInstanceState()，var savedInstanceState Activity 启动模式 standard 无检查，直接压栈 singleTop 检查栈顶 singleTask 解栈恢复 singleInstance 创建新栈 第四章 UI！！ 门面功夫 :-)","link":"/posts/37a431d8/"}],"tags":[{"name":"Android","slug":"Android","link":"/tags/Android/"}],"categories":[{"name":"杂项","slug":"杂项","link":"/categories/%E6%9D%82%E9%A1%B9/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"备忘","slug":"技术/备忘","link":"/categories/%E6%8A%80%E6%9C%AF/%E5%A4%87%E5%BF%98/"},{"name":"语言","slug":"技术/语言","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AF%AD%E8%A8%80/"},{"name":"工具","slug":"技术/工具","link":"/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"},{"name":"笔记","slug":"技术/笔记","link":"/categories/%E6%8A%80%E6%9C%AF/%E7%AC%94%E8%AE%B0/"}]}