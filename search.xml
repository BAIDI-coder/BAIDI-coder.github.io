<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法/面向序列标注的方法与应用研究</title>
      <link href="/posts/568ec988/"/>
      <url>/posts/568ec988/</url>
      
        <content type="html"><![CDATA[<h1>绪论</h1><p>从文本翻译到文字、语音识别，再到</p><h1>正文</h1><h2 id="定义">定义</h2><p>序列标注是指将输入的一串观测序列 $x_1x_2x_3…x_n$ 转化为一串标记序列 $y_1y_2y_3…y_n$ 的过程，要解决序列标记问题，实际上就是要找到一个观测序列到标记序列的映射 $f(x_i)\rightarrow y_i\space (i=1,2,…,n)$。</p><h3 id="分类">分类</h3><p>分为生成式与判别式两种方法</p><a id="more"></a><h3 id="基于HMM模型的序列标注">基于HMM模型的序列标注</h3><h4 id="马尔可夫链">马尔可夫链</h4><p><strong>马尔可夫链</strong>（Markov chain），又称离散时间马尔可夫链，为状态空间中经过从一个状态到另一个状态的转换的随机过程。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>从数学形式上来看，对于随机变量序列$X_1X_2X_3…X_n$，满足$P(X_n=x_n|X_1=x_1,X_2=x_2,X_3=x_3…,X_{n-1}=x_{n-1})=P(X_n=x_n|X_{n-1}=x_{n-1})$，则称该序列为一个一阶马尔可夫链。</p><p>从宏观意义上来看，Markov链说明了在状态转移过程中，“未来”与“过去”无关而只与“现在”有关。</p><p>Markov链常常被认为是<strong>时齐</strong>的，即转移概率与n无关。</p><p>类似的可以定义<strong>m阶Markov链</strong>，满足</p><div>$$P(X_n=x_n|X_1=x_1,X_2=x_2,X_3=x_3...,X_{n-1}=x_{n-1})\\=P(X_n=x_n|X_{n-m}=x_{n-m},X_{n-m+1}=x_{n-m+1}...,X_{n-1}=x_{n-1})$$<div><h4 id="隐马尔可夫模型">隐马尔可夫模型</h4><p><strong>隐马尔可夫模型</strong>（Hidden Markov Model 缩写：HMM）基于Markov链，不同与一般的Markov链，HMM 又加入了<strong>隐变量</strong>这一概念，即该模型包含了观测序列$X_1X_2X_3…X_n$和它一一对应的标记序列$Y_1Y_2Y_3…Y_n$。该模型用到了两个假设：</p><ol><li>时齐的Markov性假设，如<em>2.2.1</em>所述</li><li>标记（输出）状态与对应观测状态有关，且仅与其有关</li></ol><p>HMM 模型常常被用来解决预测、平滑和解码问题。本文主要讨论的序列标记问题就是一种解码问题，即求解给定输入序列，给出最有可能的标记序列的问题。</p><h4 id="问题求解">问题求解</h4><h1>总结<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">维基百科中文</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术/备忘/Hexo icarus 博客维护</title>
      <link href="/posts/6e7bdc/"/>
      <url>/posts/6e7bdc/</url>
      
        <content type="html"><![CDATA[<h2 id="基本指令">基本指令</h2><figure class="highlight plain"><figcaption><span>基本指令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;*npm指令*&#x2F;<br>npm install&#x2F;uninstall xxx<br>&#x2F;&#x2F;执行package.json中定义的脚本<br>npm run server<br><br>&#x2F;*hexo指令*&#x2F;<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s&#x2F;&#x2F;清理，生成，本地服务器<br>hexo d &#x2F;&#x2F;部署<br>hexagon -l &#x2F;&#x2F;查看插件<br></code></pre></td></tr></table></figure><h2 id="更多-Hexo-指令">更多 Hexo 指令</h2><a id="more"></a><a href="https://hexo.io/zh-cn/docs/commands" title="" target="">传送门</a><h2 id="Front-matter">Front-matter</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>layout</code></td><td style="text-align:left">布局</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>title</code></td><td style="text-align:left">标题</td><td style="text-align:left">文章的文件名</td></tr><tr><td style="text-align:left"><code>date</code></td><td style="text-align:left">建立日期</td><td style="text-align:left">文件建立日期</td></tr><tr><td style="text-align:left"><code>updated</code></td><td style="text-align:left">更新日期</td><td style="text-align:left">文件更新日期</td></tr><tr><td style="text-align:left"><code>comments</code></td><td style="text-align:left">开启文章的评论功能</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><code>tags</code></td><td style="text-align:left">标签（不适用于分页）</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>categories</code></td><td style="text-align:left">分类（不适用于分页）</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>permalink</code></td><td style="text-align:left">覆盖文章网址</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>keywords</code></td><td style="text-align:left">仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>excerpt</code></td><td style="text-align:left">摘要</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>widget</code></td><td style="text-align:left">icarus 主题空间</td><td style="text-align:left"></td></tr></tbody></table><h2 id="标签插件-Embed">标签插件 Embed</h2><blockquote><p>增强了 markdown 的功能的一系列插件<br><em><strong>info: embed 语法不要包裹在反引号中，且冒号后面不要空格！！</strong></em></p></blockquote><h3 id="官方文档">官方文档</h3><a href="https://hexo.io/zh-cn/docs/tag-plugins" title="" target="">官方插件文档</a><h3 id="其他插件">其他插件</h3><ul><li>探宝方法：<a href="http://hexo.io">hexo.io</a> 搜索 embed</li><li>自己做：<code>&lt;embed&gt;</code></li></ul><iframe src="https://www.runoob.com/tags/tag-embed.html" width="100%" height="500" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>hexo-github-card</li></ul><div style="text-align: center">  <div class="github-card"    data-user="Gisonrg"    data-repo="hexo-github-card"    data-height="200"    data-width="400"    data-theme="default"    data-target=""    data-client-id=""    data-client-secret=""  ></div></div><script src="/github-card-lib/githubcard.js"></script><ul><li>hexo-pdf</li></ul><div style="text-align: center">  <div class="github-card"    data-user="superalsrk"    data-repo="hexo-pdf"    data-height="200"    data-width="400"    data-theme="default"    data-target=""    data-client-id=""    data-client-secret=""  ></div></div><script src="/github-card-lib/githubcard.js"></script><ul><li>hexo-tag-bilibili</li></ul><div style="text-align: center">  <div class="github-card"    data-user="Z4Tech"    data-repo="hexo-tag-bilibili"    data-height="200"    data-width="400"    data-theme="default"    data-target=""    data-client-id=""    data-client-secret=""  ></div></div><script src="/github-card-lib/githubcard.js"></script><ul><li>hexo-tag-douban</li></ul><div style="text-align: center">  <div class="github-card"    data-user="YuyingWu"    data-repo="hexo-tag-douban"    data-height="200"    data-width="400"    data-theme="default"    data-target=""    data-client-id=""    data-client-secret=""  ></div></div><script src="/github-card-lib/githubcard.js"></script><h2 id="hexo-tag-bootstrap-插件">hexo-tag-bootstrap 插件</h2><h3 id="Components">Components</h3><ul><li><strong>textcolor</strong> - Convey meaning through color with a handful of emphasis utility classes.</li><li><strong>button</strong> - Inserts a button with target links, text and specified color. ** <a class="btn btn-secondary" href="url">text</a></li><li><strong>label</strong> - Inserts a label with text and specified color.</li><li><strong>pill</strong> - Inserts a label with text and specified color. ** <span class="badge badge-secondary">text</span></li><li><strong>badge</strong> - Inserts a badge with text.</li><li><strong>alert</strong> - Inserts alert messages with text and specified color.</li><li><strong>card</strong> - Add a card control ** <em>carddeck</em> - use with cards to combine multiples ** <em>cardgroup</em> - similar to carddeck</li><li><strong>jumbo</strong> - jumbotron</li><li><strong>carousel</strong> - carousel tag - each img within will create a new “slide”</li><li><strong>row</strong> - add a grid row</li><li><strong>col</strong> - add a column within a grid row</li></ul><h3 id="使用示例">使用示例</h3><a href="https://www.hahack.com/hexo-theme-freemind-blog/2014/03/16/tag-plugins/" title="" target="">！🐱‍🏍传送门🐱‍🏍</a><h3 id="举亿个栗子">举亿个栗子</h3><blockquote><p>渲染效果因css而异</p></blockquote><ul><li>badge</li></ul><span class="badge badge-secondary">text</span><ul><li>alert 块级 属性：waring danger success info</li></ul><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>Best check yo self, you’re not looking too good.</p></div><div class="alert alert-danger"><i class="fa fa-bug  float-left"></i>  <p>Change a few things up and try submitting again.</p></div><div class="alert alert-success"><i class="fa fa-lightbulb-o  float-left"></i>  <p>You successfully read this important alert message.</p></div><div class="alert alert-info"><i class="fa fa-info  float-left"></i>  <p>This alert needs your attention, but it’s not super important.</p></div><ul><li>textcolor （暂无css渲染）</li></ul><p class="text-muted"><p>Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.</p></p><p class="text-primary"><p>Nullam id dolor id nibh ultricies vehicula ut id elit.</p></p><p class="text-success"><p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p></p><p class="text-info"><p>Maecenas sed diam eget risus varius blandit sit amet non magna.</p></p><p class="text-warning"><p>Etiam porta sem malesuada magna mollis euismod.</p></p><p class="text-danger"><p>Donec ullamcorper nulla non metus auctor fringilla.</p></p><ul><li>行内label 支持属性 default warning success danger primary info</li></ul><span class="label label-default">default</span><span class="label label-warning">warinng</span><span class="label label-success">success</span><span class="label label-danger">danger</span><span class="label label-primary">primary</span><span class="label label-info">info</span><ul><li>行内btn 支持属性 primary success warning danger info</li></ul><a class="btn btn-secondary" href="http://hahack.com">btn</a><a class="btn btn-primary" href="http://hahack.com">btn</a><a class="btn btn-success" href="http://hahack.com">btn</a><a class="btn btn-warning" href="http://hahack.com">btn</a><a class="btn btn-danger" href="http://hahack.com">btn</a><a class="btn btn-info" href="http://hahack.com">btn</a><h2 id="插入HTML来增强阅读体验">插入HTML来增强阅读体验</h2><div class="alert alert-info"><i class="fa fa-info  float-left"></i>  <p><a href="https://bulma.io/documentation/" title="" target="">Bulma</a> 是一个CSS框架。查看<a href="https://bulma.io/documentation/" title="" target="">Bulma</a>文档。</p></div><div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>CSS 框架不包含js，涉及点击事件需要自行处理！</p></div><article class="message">  <div class="message-header">    <p>Note</p>    <button class="delete" aria-label="delete"></button>  </div>  <div class="message-body">    不用js的情况下适合的组件有：button，dropdown，message  </div></article><div class="dropdown">  <div class="dropdown-trigger">    <button class="button" aria-haspopup="true" aria-controls="dropdown-menu3">      <span>Click me</span>      <span class="icon is-small">        <i class="fas fa-angle-down" aria-hidden="true"></i>      </span>    </button>  </div>  <div class="dropdown-menu" id="dropdown-menu3" role="menu">    <div class="dropdown-content">      <a href="#" class="dropdown-item">        Overview      </a>      <a href="#" class="dropdown-item">        Modifiers      </a>      <a href="#" class="dropdown-item">        Grid      </a>      <a href="#" class="dropdown-item">        Form      </a>      <a href="#" class="dropdown-item">        Elements      </a>      <a href="#" class="dropdown-item">        Components      </a>      <a href="#" class="dropdown-item">        Layout      </a>      <hr class="dropdown-divider">      <a href="#" class="dropdown-item">        More      </a>    </div>  </div></div><div class="dropdown is-hoverable">  <div class="dropdown-trigger">    <button class="button" aria-haspopup="true" aria-controls="dropdown-menu4">      <span>Hover me</span>      <span class="icon is-small">        <i class="fas fa-angle-down" aria-hidden="true"></i>      </span>    </button>  </div>  <div class="dropdown-menu" id="dropdown-menu4" role="menu">    <div class="dropdown-content">      <div class="dropdown-item">        <p>You can insert <strong>any type of content</strong> within the dropdown menu.</p>      </div>    </div>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/开发/AndroidLearning</title>
      <link href="/posts/fae5c3cd/"/>
      <url>/posts/fae5c3cd/</url>
      
        <content type="html"><![CDATA[<h1>Android Studio 入坑笔记</h1><ul><li>Android Studio 自动创建 resource id 失败<ul><li>重启 AS。</li><li>Sync with file system 同步一下？</li><li>查看 R.java 中的 id 。Project 下依次打开app–&gt;build–&gt;generated–&gt;source–&gt;r–&gt;debug，在debug中的两个选项的子文件中分别有有一个R文件，既我们要找的R.java文件。（或者直接shift+shift查找R.java</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杂项/Ideas</title>
      <link href="/posts/853a41fd/"/>
      <url>/posts/853a41fd/</url>
      
        <content type="html"><![CDATA[<h1>Williams’s Fantastic Ideas</h1><blockquote><p>Github 有一个叫做 <strong>app ideas</strong> 的仓库有很多好的项目</p></blockquote><ul><li>根据图片定位到视频中的某一帧</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术/语言/Java&amp;Kotlin语法对照</title>
      <link href="/posts/7a368ad4/"/>
      <url>/posts/7a368ad4/</url>
      
        <content type="html"><![CDATA[<h1>Java &amp; Kotlin 的语法片段对照</h1><h2 id="函数式-API">函数式 API</h2><ul><li><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传入接口类型的实例（或继承了接口的匿名类）</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public interface Runnable &#123;</span><br><span class="hljs-comment">void Run();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//执行逻辑</span><br>    &#125;<br>&#125;).start()<br></code></pre></td></tr></table></figure></li><li><p>Kotlin</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//传入Lambda表达式（单抽象的接口类型也可简化为Lambda表达式后传入）</span><br>Thread &#123;<br>    <span class="hljs-comment">//执行逻辑</span><br>&#125;.start()<br></code></pre></td></tr></table></figure></li></ul><h2 id="访问控制">访问控制</h2><table><thead><tr><th>修饰符</th><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>pubilc</td><td>所有类可见</td><td>所有类可见（默认修饰符）</td></tr><tr><td>private</td><td>当前类可见</td><td>当前类可见</td></tr><tr><td>protected</td><td>当前类，子类，同意包路径下的类可见</td><td>当前类，子类可见</td></tr><tr><td>default</td><td>同一包目录下的类可见（默认修饰符）</td><td>无</td></tr><tr><td>internal</td><td>无</td><td>同一模块下的类可见</td></tr></tbody></table><h2 id="Class-对象引用">Class 对象引用</h2><table><thead><tr><th>语言</th><th>实例的Class对象</th><th>类的Class对象</th></tr></thead><tbody><tr><td>Kotlin</td><td>javaclass</td><td>类名::class.java</td></tr><tr><td>Java</td><td>(this).getclass()</td><td>类名.class</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/笔记/第一行代码 Android（第三版）读书笔记</title>
      <link href="/posts/37a431d8/"/>
      <url>/posts/37a431d8/</url>
      
        <content type="html"><![CDATA[<h1>第一行代码 Android（第三版）读书笔记</h1><h2 id="第一章-开启征程（概要）">第一章 开启征程（概要）</h2><ul><li>项目结构与目录：page 17 - page 19</li><li>Log 方法与 Logcat 的完美结合</li></ul><h2 id="第二章-Kotlin-语法糖">第二章 Kotlin 语法糖</h2><blockquote><p>同《Kotlin 学习笔记》一同食用效果最佳</p></blockquote><ul><li>《第一行》中出现的 Kotlin 特性预览表</li></ul><table><thead><tr><th style="text-align:center">主次构造函数</th><th style="text-align:center">参数默认值</th><th style="text-align:center">键值对传参</th><th style="text-align:center">字符串内嵌表达式</th></tr></thead><tbody><tr><td style="text-align:center">init {}, constructor () {}</td><td style="text-align:center">fun xxx(str: String = “”) {…}</td><td style="text-align:center">xxx(str = “…”)</td><td style="text-align:center">“${value}”</td></tr></tbody></table><table><thead><tr><th style="text-align:center">let 函数式 API</th><th style="text-align:center">Lambda 表达式</th><th style="text-align:center">空指针检查</th><th style="text-align:center">函数式 API</th></tr></thead><tbody><tr><td style="text-align:center">obj.let {obj2 -&gt; …}</td><td style="text-align:center">{para -&gt; …}, {it.toString()}</td><td style="text-align:center">?   ?.   !!.   ?:</td><td style="text-align:center">map.maxby {} //Lambda表达式</td></tr></tbody></table><table><thead><tr><th style="text-align:center">容器初始化</th><th style="text-align:center">数据类</th><th style="text-align:center">单例类</th><th style="text-align:center">循环遍历</th></tr></thead><tbody><tr><td style="text-align:center">listOf(), mapOf(), setOf()</td><td style="text-align:center">data</td><td style="text-align:center">object</td><td style="text-align:center">for-in, until, downTo, step, l…r, 容器遍历</td></tr></tbody></table><table><thead><tr><th style="text-align:center">分支控制</th><th style="text-align:center">条件控制</th><th style="text-align:center">“不变为先”</th><th style="text-align:center">访问控制</th></tr></thead><tbody><tr><td style="text-align:center">when () {… -&gt; …}, if-else 语句/表达式</td><td style="text-align:center">is (instanceof), else</td><td style="text-align:center">val, var, open class</td><td style="text-align:center">“public by default”</td></tr></tbody></table><h2 id="第三章-Activity！所见即所得">第三章 Activity！所见即所得</h2><ul><li><p>创建 Activity</p><ul><li>创建和加载布局文件 layout</li><li>在 AndroidManifest.xml 中注册Activity</li><li>编写 Activity.kt 代码 （事件绑定，方法重写等）</li></ul></li><li><p>Activity 通信与切换</p><ul><li>Intent 类<ul><li>显式切换：<code>Intent(上下文, 指定Activity 的 Class 类)</code></li><li>隐式切换：指定 <code>action</code> <code>category</code>，目标将会按照注册信息中的过滤条件响应 intent。<ul><li>过滤条件：<code>&lt;category&gt; &lt;action&gt; &lt;data&gt;</code></li></ul></li><li>传参：<code>.putExtra(), .getStringExtra()</code></li><li>启动方式：<code>startActivity() //普通启动</code> <code>startActivityForResult() //请求结果</code></li></ul></li><li>Activity 类 Result 结果<ul><li>设置结果：<code>setResult()</code></li><li>取回结果：<code>override onActivityResult()</code></li></ul></li><li>Bundle 类</li><li>团队合作时用<strong>伴生类</strong>“静态方法”来启动</li></ul></li><li><p>Activity 生命周期</p><ul><li><p>返回栈</p></li><li><p>思维导图</p></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/BAIDI-coder/PicGo/master/img/image-20200529100001541.png" alt=""></p><ul><li>保存信息<ul><li>Bundle 类型</li><li><code>onSaveInstanceState()</code>，<code>var savedInstanceState</code></li></ul></li><li>Activity 启动模式<ul><li>standard 无检查，直接压栈</li><li>singleTop 检查栈顶</li><li>singleTask 解栈恢复</li><li>singleInstance 创建新栈</li></ul></li></ul><h2 id="第四章-UI！！-门面功夫">第四章 UI！！ 门面功夫 :-)</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/语言/LatexTikz</title>
      <link href="/posts/9b17222d/"/>
      <url>/posts/9b17222d/</url>
      
        <content type="html"><![CDATA[<h1>Tikz 绘图学习笔记</h1><blockquote><p>注意事项: \begin{tikzpicture} 环境下每一行命令结尾都要加分号;</p><p>\node, \coordinate, \draw 语法参考：<a href="https://zhuanlan.zhihu.com/p/84943429">https://zhuanlan.zhihu.com/p/84943429</a></p></blockquote><h2 id="node-描点-coordinate-拟点-draw-画线-fill-填充">\node 描点, \coordinate 拟点, \draw 画线, \fill 填充</h2><ul><li>参考网站:<ul><li>路径与坐标：<a href="https://www.latexstudio.net/archives/51602.html">https://www.latexstudio.net/archives/51602.html</a></li><li>node 控制：<a href="https://www.latexstudio.net/archives/51617.html">https://www.latexstudio.net/archives/51617.html</a></li><li>线条控制: <a href="https://www.latexstudio.net/archives/51622.html">https://www.latexstudio.net/archives/51622.html</a></li></ul></li><li>示例代码:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex">\node at (A)[circle,fill,inner sep&#x3D;1pt]&#123;&#125;;<br>%        点名          属性<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/语言/Kotlin</title>
      <link href="/posts/ec3dabc7/"/>
      <url>/posts/ec3dabc7/</url>
      
        <content type="html"><![CDATA[<ul><li>Kotlin 可以编译成Java字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。</li><li>kotlin源文件不需要相匹配的目录和包，源文件可以放在任何文件目录。</li><li>$a 和 ${a.func()}我是真没话说。</li><li>完善的NULL检查机制 “!!, ?, ?:”（当一个引用可能为 null 值时, 对应的类型声明必须明确地标记为可为 null。方法是： “Type后 + ？”）</li><li>玩转for循环：可以方便的指定遍历的步长，范围。（ …, step, downTo, in, until)</li><li>Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等。<strong>不同于 Java 的是，字符==不属于==数值类型</strong>，是一个独立的数据类型。</li><li>支持二进制字面量，数值类型混入下划线增加语义性。</li><li>有些时候较小类型不会隐式转换成较大类型，需要手动调用 .toXXX() 来进行显示的类型转换。</li><li>和 <em>golang</em> 一样少了分号（这就是语法糖吗i了i了</li><li>if-else 语句与when语句等可以视为 ==表达式==（可赋值</li><li>when 与 -&gt; 符号构成强大的分支控制。</li><li>完全抛弃<em>基本数据类型</em>改用<em>对象数据类型</em>“。</li><li>“fun xxx() = xxx” 这个语法糖结合 if else, when 等特性可以打出漂亮的组合拳。</li><li>class 继承的时候对继承的父类后面<em>一般</em>要加括号（因为 java 继承中必调用父类构造函数）且此构造函数必调用著构造函数。</li></ul><a id="more"></a><ul><li>Java 与 Kotlin 访问修饰符对照表</li></ul><table><thead><tr><th>修饰符</th><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>pubilc</td><td>所有类可见</td><td>所有类可见（默认修饰符）</td></tr><tr><td>private</td><td>当前类可见</td><td>当前类可见</td></tr><tr><td>protected</td><td>当前类，子类，同意包路径下的类可见</td><td>当前类，子类可见</td></tr><tr><td>default</td><td>同一包目录下的类可见（默认修饰符）</td><td>无</td></tr><tr><td>internal</td><td>无</td><td>同一模块下的类可见</td></tr></tbody></table><ul><li><p>语法糖: 原生支持数据类、单例类 （自动完成 toString(), hashCode(), equals() 等方法）</p><ul><li>数据类对比</li></ul></li></ul><figure class="highlight java"><figcaption><span>Java-example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cellphone</span> </span>&#123;<br>    String brand;<br>    <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cellphone</span><span class="hljs-params">(String brand, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Cellphone) &#123;<br>            Cellphone other = (Cellphone) obj;<br>            <span class="hljs-keyword">return</span> other.brand.equals(brand) &amp;&amp; other.price == price;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brand.hashCode() + (<span class="hljs-keyword">int</span>) price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Cellphone(brand="</span> + brand + <span class="hljs-string">", price="</span> + price + <span class="hljs-string">")"</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Kotlin-example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cellphone</span></span>(<span class="hljs-keyword">val</span> brand: String, <span class="hljs-keyword">val</span> price: <span class="hljs-built_in">Double</span>)<span class="hljs-comment">//加一个data即可</span><br></code></pre></td></tr></table></figure><ul><li>单例类对比</li></ul><figure class="highlight java"><figcaption><span>Java-example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">singletonTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"singletonTest is called."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Kotlin-example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> Singleton &#123;<span class="hljs-comment">//只需要用object代替class即可</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">singletonTest</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">"singletonTest is called."</span>)<br>    &#125;<span class="hljs-comment">//这里相当于一个静态方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin class 类</li></ul><table><thead><tr><th>语言</th><th>实例的Class对象</th><th>类的Class对象</th></tr></thead><tbody><tr><td>Kotlin</td><td>javaclass</td><td>类名::class.java</td></tr><tr><td>Java</td><td>(this).getclass()</td><td>类名.class</td></tr></tbody></table><ul><li><p>Kotlin 标准函数</p><ul><li><p>一系列定义于 Standard.kt 里的函数</p></li><li><p>参照表</p></li></ul></li></ul><table><thead><tr><th>函数</th><th>特点</th><th>代码段</th></tr></thead><tbody><tr><td><code>let()</code></td><td>调用let的对象作为Lamda的<strong>参数</strong>，返回最后一行</td><td><code>obj.let {(obj2 -&gt;) //obj2是obj}</code></td></tr><tr><td><code>with()</code></td><td>传入对象作为Lambda的上下文，返回最后一行</td><td><code>with(obj) {//obj上下文}</code></td></tr><tr><td><code>run()</code></td><td>调用run的对象作为Lamda的上下文，返回最后一行</td><td><code>obj.run {//obj上下文}</code></td></tr><tr><td><code>apply()</code></td><td>调用apply的对象作为Lamda的上下文，<strong>返回原对象</strong></td><td><code>obj.apply {//obj上下文}</code></td></tr></tbody></table><ul><li>Kotlin “静态方法调用”<ul><li>单例类 <code>objetc {}</code></li><li>伴生类 <code>companion object {}</code></li><li>顶层方法 <code>fun xxx()</code>，可以被任意Kotlin代码直接调用，<em>文件名作为类还可以用于java静态方法调用</em></li><li><code>@JvmStatic</code> 注释，<em>只能加注在单例类方法或伴生类方法上，使其编译成java静态方法</em></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/语言/JavaLearning</title>
      <link href="/posts/6374ed46/"/>
      <url>/posts/6374ed46/</url>
      
        <content type="html"><![CDATA[<h1>2020-4-28</h1><ul><li><p>content: 对象与类，基本数据类型</p></li><li><p>int a, b; 则“a=b”表达式为int类型，不会自动转化为boolean类型</p></li><li><p>Java 的匿名内部类</p></li></ul><figure class="highlight java"><figcaption><span>Java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义语法</span><br><span class="hljs-keyword">new</span> 父类构造器（实参列表) | 实现接口()<span class="hljs-comment">//必须继承一个父类或接口</span><br>&#123;<br>      <span class="hljs-comment">//匿名内部类的类体部分</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 规范：</span><br><span class="hljs-comment"> *匿名类的声明是由java编译器自动派生自一个类实例创建表达式。</span><br><span class="hljs-comment"> *匿名类永远不能是抽象的。</span><br><span class="hljs-comment"> *匿名类总是隐式的final。</span><br><span class="hljs-comment"> *匿名类总是一个内部类；并且不能是static的。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>注意</strong>：</p><ol><li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li><li>匿名内部类中是不能定义构造函数的。</li><li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li><li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li><li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li></ol></li><li><p>内部类的class文件命名是：主类＋$＋内部类名</p></li><li><p>匿名类的class文件命名是：主类＋$＋(1,2,3…)</p></li><li><p>class 对象</p><ul><li>获取方式：有三种获得Class对象的方式：<ol><li>Class.forName(“类的全限定名”)</li><li>实例对象.getClass()</li><li>类名.class （类字面常量）</li></ol></li><li>每个类的运行时的<strong>类型信息</strong>就是用Class对象表示的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/工具/IDEA 学习笔记</title>
      <link href="/posts/5a1e79ff/"/>
      <url>/posts/5a1e79ff/</url>
      
        <content type="html"><![CDATA[<h1>IDEA基础功能概览：</h1><ul><li><p>shortcut(edit, 代码片段, 功能), 版本控制(VCS: git, github, local history)</p></li><li><p>Debug, javadoc generator, database, web deployment</p></li><li><p>project&amp;module 等概念, 模板, 项目结构查询管理</p></li></ul><h1>Tips</h1><ul><li>代码段：main</li><li>sout标准输出</li><li>soutv输出变量，soutm输出方法名，soutp输出命令行参数</li><li>变量名.sout输出变量</li><li>iter增强型for循环</li><li>引用名.for 迭代指定引用类型</li><li>实例名.fori顺序遍历 xxx.forr倒序遍历</li><li>ifn --“if xxx is null”, inn --“if not null”</li><li>xxx.nn, xxx.ifn</li><li>JavaLea</li><li>条件断点 --右键断点处</li><li>ctrl+u 查看表达式的值</li><li>Tools javadoc generator:</li><li>Local: zh_CN; Other command line args: encoding UTF-8 -charset UTF-8</li></ul><a id="more"></a><ul><li>IDE 常用快捷键对照表（原始来源: <a href="https://www.jianshu.com/p/6267a7d76018">https://www.jianshu.com/p/6267a7d76018</a> )</li></ul><table><thead><tr><th>操作</th><th>eclipse</th><th>IDEA</th><th>Visual Studio Code</th><th>Sublime</th></tr></thead><tbody><tr><td><strong>编辑 Editing</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>格式化代码 Format Code</td><td><code>Ctrl+Shift+F</code></td><td><code>Ctrl+Shift+L</code></td><td><code>Shift+Alt+F</code></td><td>无</td></tr><tr><td>删除行 Delete Line</td><td><code>Ctrl+D</code></td><td><code>Ctrl+Y</code></td><td><code>Ctrl+Shift+K</code></td><td><code>Ctrl+Shift+K</code></td></tr><tr><td>复制行 Copy Line</td><td></td><td><code>Ctrl+C</code></td><td><code>Ctrl+C</code></td><td><code>Ctrl+C</code></td></tr><tr><td>剪切行 Cut Line</td><td></td><td><code>Ctrl+X</code></td><td><code>Ctrl+X</code></td><td><code>Ctrl+X</code></td></tr><tr><td>重复行 Duplicate Line</td><td><code>Ctrl+Shift+Up/Down</code></td><td><code>Ctrl+D</code></td><td><code>Alt+Shift+Up/Down</code></td><td><code>Ctrl+Shift+D</code></td></tr><tr><td>移动行 Move Line</td><td><code>Alt+Up/Down</code></td><td><code>Alt+Shift+Up/Down</code></td><td><code>Alt+Up/Down</code></td><td><code>Ctrl+Shift+Up/Down</code></td></tr><tr><td>换行 New Line</td><td><code>Shift+Enter</code></td><td><code>Shift+Enter</code></td><td><code>Shift+Enter</code></td><td><code>Ctrl+Enter</code></td></tr><tr><td>插入上行 Insert Line Above</td><td><code>Ctrl+Shift+Enter</code></td><td><code>Ctrl+Alt+Enter</code></td><td><code>Ctrl+Shift+Enter</code></td><td><code>Ctrl+Shift+Enter</code></td></tr><tr><td>注释 Comment</td><td><code>Ctrl+/</code></td><td><code>Ctrl+/</code></td><td><code>Ctrl+/</code></td><td><code>Ctrl+/</code></td></tr><tr><td>块注释 Block Comment</td><td><code>Ctrl+Shift+/</code> <code>Ctrl+Shift+\</code></td><td><code>Ctrl+Shift+/</code></td><td></td><td><code>Ctrl+Shift+/</code></td></tr><tr><td>选择块 Block Selection</td><td><code>Alt+Shift+Up/Down</code></td><td><code>Ctrl+W</code> <code>Ctrl+Shift+W</code></td><td><code>Alt+Shift+Right/Left</code></td><td></td></tr><tr><td>优化导包 Optimize Imports</td><td><code>Ctrl+Shift+O</code></td><td><code>Ctrl+Alt+O</code></td><td></td><td></td></tr><tr><td>代码提示 Code Assist</td><td><code>Alt+/</code></td><td><code>Ctrl+Space</code> <code>Ctrl+Shift+Space</code></td><td></td><td></td></tr><tr><td>代码补全 Code Completion</td><td><code>Ctrl+Alt+/</code><br />比较low</td><td><code>Ctrl+Shift+Enter</code></td><td></td><td></td></tr><tr><td>快速修复 Quick Fix</td><td><code>Ctrl+1</code></td><td><code>Alt+Enter</code></td><td></td><td></td></tr><tr><td>Quick Access</td><td><code>Ctrl+3</code></td><td><code>Double Shift</code></td><td></td><td></td></tr><tr><td>参数信息 Parameter Info</td><td><code>Alt+Shift+/</code><br />还不如 <code>Alt+/</code></td><td><code>Ctrl+P</code></td><td></td><td></td></tr><tr><td>查看API文档 Quick Document</td><td></td><td><code>Ctrl+Q</code></td><td></td><td></td></tr><tr><td>新建文件 New File</td><td><code>Alt+Shift+N</code> <code>Ctrl+N</code></td><td></td><td></td><td></td></tr><tr><td>激活编辑器 Active Editor</td><td><code>F12</code></td><td><code>Esc</code></td><td></td><td></td></tr><tr><td>全部小写</td><td><code>Ctrl+Shift+Y</code></td><td></td><td></td><td></td></tr><tr><td>全部大写</td><td><code>Ctrl+Shift+X</code></td><td></td><td></td><td></td></tr><tr><td><strong>导航 Navigation</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>上/下一个Tab</td><td><code>Ctrl+PgUp/PgDn</code></td><td><code>Alt+Left/Right</code></td><td><code>Ctrl+PgUp/PgDn</code></td><td></td></tr><tr><td>上/下一个</td><td><code>Alt+Left/Right</code></td><td><code>Ctrl+Alt+Left/Right</code></td><td></td><td></td></tr><tr><td>上一处修改的地方</td><td><code>Ctrl+Q</code></td><td><code>Ctrl+Shift+Backspace</code></td><td></td><td></td></tr><tr><td>跳转到行 Go To Line</td><td><code>Ctrl+L</code></td><td><code>Ctrl+G</code></td><td></td><td></td></tr><tr><td>大纲/结构 Outline/Structure</td><td><code>Ctrl+O</code></td><td><code>Ctrl+F12</code></td><td></td><td></td></tr><tr><td>查看类层级 Type Hierarchy</td><td><code>Ctrl+T</code></td><td></td><td></td><td></td></tr><tr><td>查看最近文件 Recent File</td><td><code>Ctrl+E</code> <code>Ctrl+F6</code></td><td><code>Ctrl+E</code></td><td></td><td></td></tr><tr><td>跳到文件 Go To File</td><td><code>Ctrl+Shift+N</code></td><td></td><td></td><td></td></tr><tr><td>切换视图 Switch View</td><td><code>Ctrl+F7</code></td><td></td><td></td><td></td></tr><tr><td><strong>重构 Refator</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>重命名 Rename</td><td><code>Alt+Shift+R</code></td><td><code>Shift+F6</code></td><td></td><td></td></tr><tr><td>提取变量 Extract Variable</td><td><code>Alt+Shift+L</code></td><td></td><td></td><td></td></tr><tr><td>提取方法 Extract Method</td><td><code>Alt+Shift+M</code></td><td></td><td></td><td></td></tr><tr><td><strong>搜索 Find</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>查找下一个</td><td><code>Ctrl+K</code></td><td></td><td></td><td></td></tr><tr><td>查找上一个</td><td><code>Ctrl+Shfit+K</code></td><td></td><td></td><td></td></tr><tr><td>全局搜索</td><td><code>Ctrl+H</code></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术/备忘/小技巧手册</title>
      <link href="/posts/fac7f463/"/>
      <url>/posts/fac7f463/</url>
      
        <content type="html"><![CDATA[<h1>每天一个避坑小技巧</h1><ul><li>解决网站元素（例如图片）加载不出来的方法<ol><li>浏览器下审查该元素的URL地址，然后在搜索他的域名对应的地址（<a href="https://tools.ipip.net/domain.php%EF%BC%89">https://tools.ipip.net/domain.php）</a></li><li>将域名解析 “<a href="http://xxx.xxx.xxx.xxx">xxx.xxx.xxx.xxx</a> 域名” 加入到hosts文件中（一般在 %SystemRoot%\system32\drivers\etc\ 目录下）</li><li>cmd 下 ipconfig \flushdns 刷新试试</li><li>刷新浏览器查看效果</li></ol></li><li>SSR 解决端口占用问题：<ul><li>法一：在 SSR 选项设置里改变端口</li><li>法二：taskkill /pid xxx -f</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/备忘/IDE&amp;Editor Shortcuts Query</title>
      <link href="/posts/fde8aecf/"/>
      <url>/posts/fde8aecf/</url>
      
        <content type="html"><![CDATA[<h1>各大 IDE &amp; Editor 快捷键对照表</h1><table><thead><tr><th>操作</th><th>IntelliJ IDEA</th><th>Visual Studio Code</th><th>Visual Studio</th></tr></thead><tbody><tr><td><strong>编辑 Editing</strong></td><td></td><td></td><td></td></tr><tr><td>格式化代码 Format Code</td><td><code>Ctrl+Shift+L</code></td><td><code>Shift+Alt+F</code></td><td></td></tr><tr><td>删除行 Delete Line</td><td><code>Ctrl+Y</code></td><td><code>Ctrl+Shift+K</code></td><td></td></tr><tr><td>选中行 Select Line</td><td></td><td><code>Ctrl+L</code></td><td></td></tr><tr><td>复制行 Copy Line</td><td><code>Ctrl+C</code></td><td><code>Ctrl+C</code></td><td></td></tr><tr><td>剪切行 Cut Line</td><td><code>Ctrl+X</code></td><td><code>Ctrl+X</code></td><td></td></tr><tr><td>重复行 Duplicate Line</td><td><code>Ctrl+D</code></td><td><code>Alt+Shift+Up/Down</code></td><td></td></tr><tr><td>移动行 Move Line</td><td><code>Alt+Shift+Up/Down</code></td><td><code>Alt+Up/Down</code></td><td></td></tr><tr><td>换行 New Line</td><td><code>Shift+Enter</code></td><td><code>Shift+Enter</code></td><td></td></tr><tr><td>插入上行 Insert Line Above</td><td><code>Ctrl+Alt+Enter</code></td><td><code>Ctrl+Shift+Enter</code></td><td></td></tr><tr><td>注释 Comment</td><td><code>Ctrl+/</code></td><td><code>Ctrl+/</code></td><td></td></tr><tr><td>块注释 Block Comment</td><td><code>Ctrl+Shift+/</code></td><td><code>Ctrl+Shift+/</code></td><td></td></tr><tr><td>选择块 Block Selection</td><td><code>Ctrl+W</code> <code>Ctrl+Shift+W</code></td><td><code>Alt+Shift+Right/Left</code></td><td></td></tr><tr><td>选择相同内容</td><td><code>Alt+J</code></td><td><code>Ctrl+D</code></td><td></td></tr><tr><td>优化导包 Optimize Imports</td><td><code>Ctrl+Alt+O</code></td><td></td><td></td></tr><tr><td>代码提示 Code Assist</td><td><code>Ctrl+Space</code> <code>Ctrl+Shift+Space</code></td><td></td><td></td></tr><tr><td>代码补全 Code Completion</td><td><code>Ctrl+Shift+Enter</code></td><td></td><td></td></tr><tr><td>快速修复 Quick Fix</td><td><code>Alt+Enter</code></td><td></td><td></td></tr><tr><td>Quick Access</td><td><code>Double Shift</code></td><td></td><td></td></tr><tr><td>参数信息 Parameter Info</td><td><code>Ctrl+P</code></td><td></td><td></td></tr><tr><td>查看API文档 Quick Document</td><td><code>Ctrl+Q</code></td><td></td><td></td></tr><tr><td>新建文件 New File</td><td></td><td><code>Ctrl+N</code></td><td></td></tr><tr><td>激活编辑器 Active Editor</td><td><code>Esc</code></td><td></td><td></td></tr><tr><td>全部小写</td><td></td><td></td><td></td></tr><tr><td>全部大写</td><td></td><td></td><td></td></tr><tr><td><strong>导航 Navigation</strong></td><td></td><td></td><td></td></tr><tr><td>上/下一个Tab</td><td><code>Alt+Left/Right</code></td><td><code>Ctrl+PgUp/PgDn</code></td><td></td></tr><tr><td>上/下一个</td><td><code>Ctrl+Alt+Left/Right</code></td><td></td><td></td></tr><tr><td>上一处修改的地方</td><td><code>Ctrl+Shift+Backspace</code></td><td></td><td></td></tr><tr><td>跳转到行 Go To Line</td><td><code>Ctrl+G</code></td><td><code>Ctrl+G</code></td><td></td></tr><tr><td>大纲/结构 Outline/Structure</td><td><code>Ctrl+F12</code></td><td></td><td></td></tr><tr><td>查看类层级 Type Hierarchy</td><td></td><td></td><td></td></tr><tr><td>查看最近文件 Recent File</td><td><code>Ctrl+E</code></td><td></td><td></td></tr><tr><td>跳到文件 Go To File</td><td></td><td></td><td></td></tr><tr><td>切换视图 Switch View</td><td></td><td></td><td></td></tr><tr><td><strong>重构 Refator</strong></td><td></td><td></td><td></td></tr><tr><td>重命名 Rename</td><td><code>Shift+F6</code></td><td></td><td></td></tr><tr><td>提取变量 Extract Variable</td><td></td><td></td><td></td></tr><tr><td>提取方法 Extract Method</td><td></td><td></td><td></td></tr><tr><td><strong>搜索 Find</strong></td><td></td><td></td><td></td></tr><tr><td>查找 Find</td><td><code>Ctrl+F</code> <code>Ctrl+L</code></td><td><code>Ctrl+F</code></td><td></td></tr><tr><td>查找下一个</td><td></td><td></td><td></td></tr><tr><td>查找上一个</td><td></td><td></td><td></td></tr><tr><td>全局搜索</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 备忘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术/备忘/CMD 指令备忘</title>
      <link href="/posts/369ceeb5/"/>
      <url>/posts/369ceeb5/</url>
      
        <content type="html"><![CDATA[<h1>CMD 指令备忘</h1><ul><li>Process 类<ul><li>tasklist 列出所有进程</li><li>taskkill /pid xxx -f 杀死指定id process</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂项/DiscreteMathematicNote</title>
      <link href="/posts/b8e16674/"/>
      <url>/posts/b8e16674/</url>
      
        <content type="html"><![CDATA[<h1>Discrete MatheMatic Note 离散数学笔记</h1><p>Author: BAIDI<br>Date: from 2020-2-19</p><h2 id="1-Logic-and-Proofs-逻辑和证明">1 Logic and Proofs 逻辑和证明</h2><h3 id="1-1-Propositional-Logic">1.1 Propositional Logic</h3><ul><li>connectives 逻辑联结词<br>negation<br>conjunction(合取) disjunction(析取) --inclusive/exclusive …<br>conditional statement/biconditional statement</li></ul><h3 id="1-2-Applications-of-Propositional-Logic">1.2 Applications of Propositional Logic</h3><ol><li>System Specification 系统规范说明</li><li>Boolean Logic 布尔逻辑</li><li>Logic Puzzles 逻辑谜题</li><li>Logic Circuits 逻辑电路</li></ol><h3 id="1-3-Propositional-Equivalences">1.3 Propositional Equivalences</h3><ol><li>tautology, contradiction, contingency</li><li>logically equivalent ≡ ⇔</li><li>Law</li></ol><ul><li>De Morgan’s Law<br>¬(p ∧ q) ≡ ¬p ∨ ¬q<br>¬(p ∨ q) ≡ ¬p ∧ ¬q</li><li>other Law(check relative table)<br>¬p ∨ q and p → q</li><li>Distribute Law<br>p ∨ (q ∧ r) ≡ (p ∨ q) ∧ (p ∨ r)</li></ul><ol start="4"><li>Law’s extension</li><li>Law’s application</li><li>Proposition’s Satisfiability and Problem’s Solution</li><li>Soduka Puzzle’s solution</li></ol><h3 id="1-4-Predicates-and-Quantifiers-谓词和量词">1.4 Predicates and Quantifiers 谓词和量词</h3><h4 id="Predicates-谓词">Predicates 谓词</h4><blockquote><p>basic notion:Propositional function P (命题函数P)<br>n-place / n-ary predicates (n位/元谓词) 包含多个变量的谓词<br>P(x1, x2…xn) --谓词+变量=命题<br>Application–verify the correctness of a programme:<br>Precondition(input) &amp; Postcondition(output expected) (前置条件 &amp; 后置条件）</p></blockquote><h4 id="Quantifiers-量词">Quantifiers 量词</h4><p>Notions:</p><ol><li>Quantification 量化</li><li>Universal quantifier 全称量词</li><li>domain: domain of discourse 论域(universe of discouse 全体域)</li><li>counterexample 反例</li><li>Existential quantifier 存在量词</li><li>Precedence 优先级</li><li>Resticted Domains 约束域 (约束域和条件，合取的等价关系)</li><li>bound (被赋值或被量词联结）-绑定 scope -作用域 free -自由(未绑定的变量)</li></ol><h4 id="Logic-Equivalences-Involving-Quantifiers">Logic Equivalences Involving Quantifiers</h4><p>Notions:</p><ol><li>comma 逗号</li><li>Prolog --programming in logic</li><li>Prolog fact / Prolog rule</li><li>semicolon 分号</li></ol><h3 id="Nested-Quantifiers-嵌套变量">Nested Quantifiers 嵌套变量</h3><h3 id="Rules-of-inference-推理规则">Rules of inference 推理规则</h3><ul><li>argument 论证</li><li>valid 有效性</li><li>premise 前提</li><li>fallacy 谬误</li><li>argument form 推理形式</li><li>modus ponens 假言推理 （law of detachment 分离规则）</li><li>hypothesis 假设</li><li>syllogism 三段论</li><li>contrapositive 逆否命题</li><li>instantiation 实例</li><li>arbitrary 任意的</li></ul><h3 id="Itroduction-to-Proofs">Itroduction to Proofs</h3><ul><li>theorem 定理 axiom 公理 lemmma 引理</li><li>corollary 推论 conjecture 猜想</li><li>vacuous proof 空证明</li><li>trivial proof 平凡证明</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/语言/Golang 避坑手册</title>
      <link href="/posts/c737d2b3/"/>
      <url>/posts/c737d2b3/</url>
      
        <content type="html"><![CDATA[<ul><li><p>&quot;{&quot;的位置要注意分号无<br>多变量声明：<br>//类型相同多个变量, 非全局变量</p></li><li><p>var vname1, vname2, vname3 type</p></li><li><p>vname1, vname2, vname3 = v1, v2, v3</p></li><li><p>var vname1, vname2, vname3 = v1, v2, v3 // 和 python 很像,不需要显示声明类型，自动推断</p></li><li><p>vname1, vname2, vname3 := v1, v2, v3 // 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误<a id="more"></a></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 这种因式分解关键字的写法一般用于声明全局变量</span><br><span class="hljs-keyword">var</span> (<br>    vname1 v_type1<br>    vname2 v_type2<br>)<br></code></pre></td></tr></table></figure><ul><li><p>默认值</p></li><li><p>并行特性：多个返回值，并行赋值</p></li><li><p>常量可以用len(), cap(), unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：</p></li><li><p>a = a++ // 这是不允许的，会出现变异错误 syntax error: unexpected ++ at end of statement</p></li><li><p>! Go 的自增，自减只能作为表达式使用，而不能用于赋值语句。</p></li><li><p>for each range loop</p></li><li><p>!!! 函数闭包（同一个被赋予闭包函数的函数每次调用都会将匿名函数内的局部变量记忆下来）</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    add_func := add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>    fmt.Println(add_func(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br>    fmt.Println(add_func(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>    fmt.Println(add_func(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br>&#125; <br><span class="hljs-comment">// 闭包使用方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x1, x2 <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">func</span><span class="hljs-params">(x3 <span class="hljs-keyword">int</span>,x4 <span class="hljs-keyword">int</span>)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>  &#123;<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x3 <span class="hljs-keyword">int</span>,x4 <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>&#123; <br>       i++<br>       <span class="hljs-keyword">return</span> i,x1+x2,x3+x4<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>:= cannot be used globally!!!</p></li><li><p>全局变量和局部变量都有默认值</p></li><li><p>结构体与数组的匿名</p></li><li><p>append()必须要用它的返回值（原因很简单，其参数列表用的是值传递而不是指针传递）</p></li><li><p>map必须要初始化（用make（）或者声明的时候直接赋值），否则只是个nil，无法对其进行赋值！！！？？</p></li><li><p>!!!GO没有隐式类型转换！！！需要灵活使用显示类型转换！</p></li><li><p>将一个结构体赋值给一个接口变量可以想象成该接口成为了一个指向该结构体的“指针”</p></li><li><p>通道chan类型是“值相关”的，相同chan值描述同一个通道，chan用close（）关闭，）有点像file descriptor？</p></li><li><p>两个并发线程时间前后关系不确定，同一个程序可能有不同结果<br>close一个chan后还能接收，不可发送</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法/算法启蒙</title>
      <link href="/posts/8ee1a4a1/"/>
      <url>/posts/8ee1a4a1/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面：“学好程序与算法，走遍天下都不怕。”</strong></p><hr><h1>枚举</h1><ul><li>背景<ul><li>找不到合适的数学公式和技巧</li><li>（改良后）枚举复杂度不是特别大</li><li>通常用于找到一种情况使之满足题意的题目</li><li>配合假设法找到目标情形：假币问题</li></ul></li><li>技巧<ul><li><strong>跳跃枚举法</strong>：跳过对没有必要的情况的枚举</li><li><strong>局部枚举法</strong>：枚举局部，剩下的由该局部确定。例如熄灯问题</li></ul></li></ul><h1>递归</h1><ul><li>作用<ul><li>替代<strong>多重循环</strong>，如：n皇后问题。<ul><li>这种类型往往要运用到一个<code>全局/静态变量</code>来存储前面算过的结果，譬如n皇后就用到了一个全局数组来保存每一行的皇后拜访情况。全局/静态变量的好处就在于<code>所有递归函数共享成果</code>，就像<code>递推迭代</code>一样，每一步会影响下一步。</li><li>递归函数形式：T function( T f(n) )，函数意义：在前n-1步已经完成的情况下决定如何走第n步，往往第一个被调用的function参数为0或1（然后依次调用 $1$ ~ $n_0$）</li></ul></li><li>解决实质是<strong>递归形式</strong>的问题<a id="more"></a><ul><li>有些问题本身就是<code>递归定义</code>的，比如不少表达式就是递归定义的：逆波兰，四则运算。逆波兰<code>直接递归</code>调用自身定义，四则运算则包含项，因子和表达式自身等多个概念，是一种<code>间接递归</code>调用自身定义</li><li>函数，数列的递推公式</li><li>关键是搞清楚问题是怎样递归定义的，可以借助<strong>画图，写代数式</strong>的办法捋清楚。</li></ul></li><li>将问题分解为规模更小的<strong>子问题</strong>来求解<ul><li>如何来分解？</li><li><code>“n=1+(n-1)”法</code><ul><li>比方说要解决一个规模为n的问题，先找到解决该问题的<code>第一步</code>怎么做，然后再把剩下的问题解决，剩下的问题规模刚好是n-1且解决过程自相似，可以用上递归n-1。e.g.台阶问题</li></ul></li><li><code>“n=(n-1)+1”法</code><ul><li>先解决n-1问题，再将最后一步完善,e.g.汉诺塔问题</li></ul></li><li>与多重循环不同，该方法第一个调用的function参数往往时n0总规模</li><li>与分治不同，分治往往偏向于均分，而且多了一步综合，不过分治与递归又可以相互补充</li></ul></li></ul></li></ul><blockquote><p>附注</p><ol><li>atof（）函数，将浮点串转变为浮点数</li><li>cin.peek（）函数，提前预知输入而非读取</li><li>浮点数的比较引入eps</li></ol></blockquote><h1>二分</h1><ul><li>简介<ul><li>对一个待求系统（通常为<strong>有序</strong>系统），每次都均分为两半，<strong>通过判断“砍掉”其中“无用”的一半</strong>，对剩下的一半用同样的方法处理，直到得出结论。</li></ul></li><li>作用<ul><li>二分查找<ul><li>不仅限于查找某一个具体的数，还可以查找符合某种要求的数（通常满足一定的大小关系）</li></ul></li><li>二分法求方程根</li></ul></li></ul><h1>分治</h1><ul><li>基本思想<ul><li>将一个问题拆分成两个或两个以上规模更小的问题，然后将小问题分别解决或只解决<code>部分</code>问题，最后<code>综合处理</code>一次。</li></ul></li><li>一般模式：分划，局部处理，综合处理（<strong>分治</strong> | <strong>归并</strong>）<ul><li>常常与<code>递归</code>思想结合</li></ul></li><li>作用：使<code>规模缩小</code>，提高算法效率（想想：不断地递归并分治，使得规模不断二分）</li><li>应用举例：基于分治策略的快速排序和归并排序</li></ul><blockquote><p>附注</p><ol><li>&quot; x &amp; 1 &quot; 表达式判别x奇偶性</li><li>快速幂算法</li></ol></blockquote><h1>动态规划</h1><ul><li>背景<ul><li>问题具有<strong>最优子结构</strong><ul><li>问题的最优解所包含的子问题的解也是最优的</li></ul></li><li>问题具有<strong>无后效性</strong><ul><li>当前的若干个状态值一旦确定，则此后过程的演变就只和这若干个状态的值有关，和之前是采取何种手段或经过哪条路径演变到当前的这若干个状态，没有关系。</li></ul></li><li>单纯的递归会导致大量子问题 <em>重复计算</em> 时</li></ul></li><li>思路方法<ol><li><strong>原问题分解为子问题</strong><ul><li>一些问题的求解归结于它的子问题的求解，且子问题与原问题类似，只是规模减小。</li><li>子问题一旦解决即被保存（通常存入一个多维数组）。</li></ul></li><li><strong>确定状态</strong><ul><li>“状态”简介：在用动态规划解题时，我们往往将和子问题相 关的各个变量的<code>一组取值</code>，称之为一个“<code>状态</code>”。一个“状态”对应于一个或多个子问题， 所谓某个“状态”下的“<code>值</code>”，就是这个“状态”所对应的<code>子问题的解</code>。</li><li><code>状态空间与时间复杂度</code>：整个问题的时间复杂度是状态数目乘以计算每个状态所需时间。（在数字三角形里每个“状态”只需要经过一次，且在每个状态上作计算所花的时间都是和N无关的常数。）</li><li>用动态规划解题，经常碰到的情况是，K个整型变量能 构成一个状态（如数字三角形中的行号和列号这两个变量 构成“状态”）。如果这K个整型变量的取值范围分别是 N1, N2, ……Nk，那么，我们就可以用一个K维的数组 array[N1] [N2]……[Nk]来存储各个状态的“值”。这个 “值”未必就是一个整数或浮点数，可能是需要一个结构 才能表示的，那么array就可以是一个结构数组。一个 “状态”下的“值”通常会是一个或多个子问题的解。</li></ul></li><li><strong>确定一些初始状态（边界状态）的值</strong></li><li><strong>确定状态转移方程</strong><ul><li>将第一步 <em>分解</em> 得到的原问题与子问题的关系用数学符号语言表述出来，即实现状态之间的转移关系。</li></ul></li></ol></li><li>动规程序写法<ul><li><strong>记忆递归型</strong><ul><li>递归函数+记忆数组</li></ul></li><li><strong>“人人为我”递推型</strong><ul><li>1,2,3,…,n-1 =&gt; n</li><li>递推到“n”时“n”仍未被求出，前面已被求出的状态值用于求“n”的状态值</li></ul></li><li><strong>“我为人人”递推型</strong><ul><li>n =&gt; k (k&gt;n)</li><li>递推到“n”时“n”已经被求出，n将用于求后面的状态值</li></ul></li></ul></li></ul><table><thead><tr><th></th><th>递归写法</th><th>递推写法</th></tr></thead><tbody><tr><td>难度</td><td>直观简便</td><td>较复杂，可能需要结合图形理解</td></tr><tr><td>内存占用</td><td>较大，有爆栈风险</td><td>小，还可以用滚动数组进一步节省空间</td></tr></tbody></table><blockquote><p>动规中<strong>递归法向递推法转化</strong>的一般方法：</p><ul><li>递归函数有n个参数，就定义一个n维的数组，数组的下标是递归函数参数的取值范围，数组元素的值 是递归函数的返回值，这样就可以从边界值开始， 逐步填充数组，相当于计算递归函数值的逆过程。</li></ul></blockquote><blockquote><p><strong>常见分解（状态转移）方法归纳</strong></p><ul><li>多分类讨论， 想想解决原问题等同于解决什么和什么。有时候要经过<strong>多层分解</strong>才能够得到与原问题结构相同的子问题。</li><li>“n=(n-1)+1”型与&quot;n=1+(n-1)&quot;型（与 <em>递归</em> 的 <em>先走一步</em> 思想又异曲同工之妙，n为问题规模）</li><li>&quot;F(i,j,k)=F(i-1,j,k)+F(i,j-1,k)+F(i,j,k-1)&quot;型（这里拿 <em>三维</em> 的情况举例，其他维度的状态转移方程与此大同小异）</li><li>&quot;F(m,n)=A, A=G( F(m-1,n),F(m,n-1) )&quot;型，<strong>间接</strong>递归</li></ul></blockquote><blockquote><p>附注</p><ol><li>数字三角形题目启示录：<br>①<strong>空间优化</strong>：<strong>滚动数组</strong>（通过覆盖今后无用的旧有数据空间的方法来压缩空间），<strong>降维</strong>，关注不必要的存储空间以及运行过程中变得可以丢弃的数据。②递归化递推：逆向思维。</li></ol></blockquote><h1>深度优先搜索</h1><blockquote><p>关键词：<em>回溯</em> <em>标记(判重)</em> <em>剪枝</em> <em>图</em> <em>状态</em></p></blockquote><ul><li>简介<ul><li>从某个起点开始每走一步就做一个标记，然后下一步随便选择一个没有走过的节点，走不通则回退到上一步重新选择。这种走法总是试图“走的更远”。</li></ul></li><li>重要概念<ul><li><strong>图</strong>（连通图，非连通图，子图，极大连通子图…）</li><li>图上<strong>节点</strong>（或者某抽象的状态：e.g.譬如每个棋局也可以看作是一个图节点）</li><li>图上<strong>边</strong>：节点之间的联系</li><li><strong>图路径（枝）</strong></li></ul></li><li>图的表示<ul><li><strong>邻接矩阵</strong>：<em>L[i][j]</em> 用一个二维数组（元素可以是一个结构，存储诸如 <em>连通与否</em> <em>路径长度</em> <em>权值</em> <em>方向</em> 等内容）表示节点i与节点j之间的联系。遍历复杂度：<strong>O(n^2)</strong>,n表示节点 。</li><li><strong>邻接表</strong>：<em>S[k]</em> 用一个一维数组（元素可以是一个结构，存储 <em>邻接节点</em> 以及诸如 <em>路径长度</em> <em>权值</em> <em>方向</em> 等内容）表示所有与节点k有关的边的信息。遍历复杂度：<strong>O(n+e)</strong>,n表示节点数，e表示边数。<ul><li>当e特别大而接近n^2时，邻接表就失去了优势变得和邻接矩阵差不多了。</li></ul></li><li>其他表示方法：具体问题具体分析。</li></ul></li><li>剪枝<ul><li><strong>可行性剪枝</strong>：每搜索一个节点后发现不满足题目要求则直接回溯防止沿着这条路径继续错误地走下去。</li><li><strong>最优性剪枝</strong>：每搜索一个节点后都对当前路径的最优性进行检验，若当前以及可以判明不是最优路径或者说接着走下去一定不是最优路径则直接回溯。<ul><li><strong>与整体最优解比较来剪枝</strong></li><li><strong>保存中间结果用于最优性剪枝</strong> ：如果到达某个状态A时，发现前面曾经也到达过A，且前面那次到达A所花代价更少，则剪枝。这要求保存到达状态A的到目前为止的最少代价。 （ 对每个节点都开辟存储空间来存放以该节点为终点的当前最优解，每次搜索到一个节点就将该最优值与新值比较，原值更优则剪枝，新值更优则更新该最优值）</li><li><em>注意：“最优”的决定要素可能不止一项，还可能是多元因素，如：ROADS问题中有费用和路程两个因素。剪枝时要考虑控制单一变量。</em></li></ul></li></ul></li></ul><h1>广度优先搜索</h1><ul><li>简介<ul><li>从节点开始层次遍历（用队列）整个图。</li></ul></li><li>特点<ul><li>搜到的路径一定是<strong>最短</strong>的。</li><li>占用空间较大，尤其是目标节点层次很高时。</li><li>如果题目要求<strong>路径</strong>则每次入队的元素都要包含有<strong>指向父节点的“指针”</strong>。要注意，STL中的queue容器中元素一旦出队则会导致<em>对象的丢失</em>，因此需要自己动手编写一个保证父节点不会丢失的队列。</li></ul></li><li>一般模式<br>广度优先搜索算法如下：（用QUEUE）<ol><li>把初始节点S0放入Open表中</li><li>如果Open表为空，则问题无解，失败退出</li><li>把Open表的第一个节点取出放入Closed表，并记该节点为n</li><li>考察节点n是否为目标节点。若是，则 得到问题的解，成功退出</li><li>若节点n不可扩展，则转第(2)步</li><li>扩展节点n，将其不在Closed表和<br>Open表中的子节点(判重）放入Open表的尾 部，如有必要为每一个子节点设置指向父节点的指针 (或记录节点的层次），然后转第(2)步。</li></ol></li></ul><h2 id="DSP-vs-BSP">DSP vs BSP</h2><table><thead><tr><th></th><th>深搜</th><th>广搜</th></tr></thead><tbody><tr><td>适用范围</td><td>几乎任何问题</td><td>状态表示比较简单，求最优策略的问题</td></tr><tr><td>优点</td><td>空间占用较少</td><td>找到的解一定路径最短</td></tr><tr><td>缺点</td><td>运气不好时耗时长，甚至无法在多项式时间内求解，需要剪枝优化</td><td>目标节点层次高时搜索过程将产生许多无用节点，搜索效率低且占用空间大，需要优化存储方式</td></tr><tr><td>结构</td><td>栈（递归）</td><td>队列</td></tr></tbody></table><blockquote><p>根据题目要求凭借自己的经验和对两个搜索的熟练程度做出选择</p></blockquote><h1>贪心</h1><ul><li>简介<ul><li>只考虑当前最优，通过<strong>局部最优</strong>达到<strong>整体最优</strong>的策略</li><li>贪心算法需要证明其正确性</li></ul></li><li>贪心检验：<strong>替换法</strong><ul><li>假设最优序列为{ai}，贪心得到的序列为{bi}，则只需要证明{ai}={bi}即可证明贪心得到的是整体最优。</li><li>必要时先将ai按照bi（贪心策略得到的序列）的方式<strong>排好序</strong></li><li>然后从i=1开始逐个考虑能否将ai<strong>替换</strong>为bi而不影响ai后面序列的选择。如果对于所有i均可替换，则{ai}={bi}。</li><li><em>数学归纳法</em></li></ul></li></ul><blockquote><p><em>附注</em><br>一类常见的应用贪心策略的题：区间题<br>解决思路：关注端点，合理排序，顺序处理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 搜索算法 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术/语言/C指针扫盲</title>
      <link href="/posts/f1e4bda1/"/>
      <url>/posts/f1e4bda1/</url>
      
        <content type="html"><![CDATA[<h2 id="首先看看函数指针，函数名，以及它们分别与-和-结合后的值">首先看看函数指针，函数名，以及它们分别与*和&amp;结合后的值</h2><ul><li>程序清单</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"成功调用"</span>);&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">void</span>(*p_func)(<span class="hljs-keyword">void</span>)=func;<br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"func是函数名，p_func是指向该函数的指针，那么有:"</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"func=%p\n*func=%p\n&amp;func=%p\</span><br><span class="hljs-string"> \np_func=%p\n*p_func=%p\</span><br><span class="hljs-string"> \n&amp;p_func=%p"</span>,func,*func,&amp;func,p_func,\<br> *p_func,&amp;p_func);<br> <br> <span class="hljs-comment">//puts("\n接着我们尝试用上述变量调用函数:");</span><br> <span class="hljs-comment">//func();</span><br> <span class="hljs-comment">//(*func)();</span><br> <span class="hljs-comment">//(&amp;func)();</span><br> <span class="hljs-comment">//(p_func)();</span><br> <span class="hljs-comment">//(*p_func)();</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果<a id="more"></a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">func是函数名，p_func是指向该函数的指针，那么有:<br>func=<span class="hljs-number">004015</span>C0<br>*func=<span class="hljs-number">004015</span>C0<br>&amp;func=<span class="hljs-number">004015</span>C0<br>p_func=<span class="hljs-number">004015</span>C0<br>*p_func=<span class="hljs-number">004015</span>C0<br>&amp;p_func=<span class="hljs-number">0061F</span>ECC<br></code></pre></td></tr></table></figure><p>**可见==func==,==<em>func==,==&amp;func==,==p_func==,==<em>p_func==代表的值都是func()函数的地址</em></em> （ <em>&amp;p_func是指针的地址</em> ）</p><h2 id="再来看看将它们分别作为函数名的结果">再来看看将它们分别作为函数名的结果</h2><ul><li>程序清单</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">"成功调用"</span>);&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">void</span>(*p_func)(<span class="hljs-keyword">void</span>)=func;<br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"func是函数名，p_func是指向该函数的指针，那么有:"</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"func=%p\n*func=%p\n&amp;func=%p\</span><br><span class="hljs-string"> \np_func=%p\n*p_func=%p\</span><br><span class="hljs-string"> \n&amp;p_func=%p"</span>,func,*func,&amp;func,p_func,\<br> *p_func,&amp;p_func);<br> <br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"\n接着我们尝试用上述变量调用函数:"</span>);<br> func();<br> (*func)();<br> (&amp;func)();<br> (p_func)();<br> (*p_func)();<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>==func==，==p_func==，==*p_func==，==*func==，==&amp;func==作函数名</p><ul><li>源程序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"\n接着我们尝试用上述变量调用函数:"</span>);<br> func();<br> (*func)();<br> (&amp;func)();<br> (p_func)();<br> (*p_func)();<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编译运行结果</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">func是函数名，p_func是指向该函数的指针，那么有:<br>func=<span class="hljs-number">004015</span>C0<br>*func=<span class="hljs-number">004015</span>C0<br>&amp;func=<span class="hljs-number">004015</span>C0<br>p_func=<span class="hljs-number">004015</span>C0<br>*p_func=<span class="hljs-number">004015</span>C0<br>&amp;p_func=<span class="hljs-number">0061F</span>ECC<br>接着我们尝试用上述变量调用函数:<br>成功调用<br>成功调用<br>成功调用<br>成功调用<br>成功调用<br></code></pre></td></tr></table></figure><blockquote><p>可见==func==，==p_func==，==*p_func==，==*func==，==&amp;func==作函数名均可以实现函数调用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法/回合制战斗</title>
      <link href="/posts/aee17ffb/"/>
      <url>/posts/aee17ffb/</url>
      
        <content type="html"><![CDATA[<h1>一小道C语言题带来的乐趣</h1><hr><p><strong><code> 要用游戏的玩法打败游戏的情景题!</code></strong><br>对于以下题目：<br>某游戏规则中，甲乙双方每个回合的战斗总是有一方胜利，一方失败。游戏规定：失败的一方要把自己的体力值的1/4加给胜利的一方。例如：如果双方体力值当前都是4，则经过一轮战斗后，双方的体力值会变为：5，3。现在已知：双方开始时的体力值甲：1000，乙：2000。假设战斗中，甲乙获胜的概率都是50%，求解：双方经过4个回合的战斗，体力值之差小于1000的理论概率。<br>用基础模拟算法来解决：<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all 16<span class="hljs-comment">//所有可能的结果数目</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exchange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> * x,<span class="hljs-keyword">double</span> * y)</span> <span class="hljs-comment">//x为吸收血量方 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> t;<br>t=(*y)*<span class="hljs-number">0.25</span>;(*x)+=t;(*y)-=t;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> js=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">double</span> x=<span class="hljs-number">1000</span>,y=<span class="hljs-number">2000</span>;<br><span class="hljs-comment">//美好的游戏模拟开始了</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>&#123;<br><span class="hljs-keyword">double</span> ax=x,ay=y;<span class="hljs-comment">//存档，防止数据丢失</span><br>i?exchange(&amp;x,&amp;y):exchange(&amp;y,&amp;x);  <span class="hljs-comment">//i判断甲（x）是否赢得一回合，并改变血条 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>&#123;<br><span class="hljs-keyword">double</span> bx=x,by=y;<br>i?exchange(&amp;x,&amp;y):exchange(&amp;y,&amp;x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>&#123;<br><span class="hljs-keyword">double</span> cx=x,cy=y;<br>i?exchange(&amp;x,&amp;y):exchange(&amp;y,&amp;x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>&#123;<br><span class="hljs-keyword">double</span> dx=x,dy=y;<br>i?exchange(&amp;x,&amp;y):exchange(&amp;y,&amp;x);<br><span class="hljs-keyword">if</span>(x-y&lt;<span class="hljs-number">1000</span>&amp;&amp;x-y&gt;<span class="hljs-number">-1000</span>) js++;<br>x=dx;y=dy; <span class="hljs-comment">//重新读档，开始下一轮模拟 </span><br>&#125;<br>x=cx;y=cy;<span class="hljs-comment">//读档，余同</span><br>&#125;<br>x=bx;y=by;<br>&#125;<br>x=ax;y=ay;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"四回合后体力值差&lt;1000的理论概率:\n%f"</span>,js*<span class="hljs-number">1.0</span>/all);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>==是不是特像打游戏刷关呢?( ^ v ^ )==</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
